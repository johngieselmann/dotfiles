# Modified/Stolen from:
# http://mths.be/dotfiles

# Simple calculator
function calc() {
    local result=""
    result="$(printf "scale=10;$*\n" | bc --mathlib | tr -d '\\\n')"
    #                       └─ default (when `--mathlib` is used) is 20
    #
    if [[ "$result" == *.* ]]; then
        # improve the output for decimal numbers
        printf "$result" |
        sed -e 's/^\./0./'        `# add "0" for cases like ".5"` \
            -e 's/^-\./-0./'      `# add "0" for cases like "-.5"`\
            -e 's/0*$//;s/\.$//'   # remove trailing zeros
    else
        printf "$result"
    fi
    printf "\n"
}

# Create a new directory and enter it
function take () {
    mkdir -p "$@" && cd "$@"
}

# Create a .tar.gz archive, using `zopfli`, `pigz` or `gzip` for compression
function targz() {
    local tmpFile="${@%/}.tar"
    tar -cvf "${tmpFile}" --exclude=".DS_Store" "${@}" || return 1

    size=$(
        stat -f"%z" "${tmpFile}" 2> /dev/null; # OS X `stat`
        stat -c"%s" "${tmpFile}" 2> /dev/null # GNU `stat`
    )

    local cmd=""
    if (( size < 52428800 )) && hash zopfli 2> /dev/null; then
        # the .tar file is smaller than 50 MB and Zopfli is available; use it
        cmd="zopfli"
    else
        if hash pigz 2> /dev/null; then
            cmd="pigz"
        else
            cmd="gzip"
        fi
    fi

    echo "Compressing .tar using \`${cmd}\`…"
    "${cmd}" -v "${tmpFile}" || return 1
    [ -f "${tmpFile}" ] && rm "${tmpFile}"
    echo "${tmpFile}.gz created successfully."
}

# Determine size of a file or total size of a directory
function fs() {
    if du -b /dev/null > /dev/null 2>&1; then
        local arg=-sbh
    else
        local arg=-sh
    fi
    if [[ -n "$@" ]]; then
        du $arg -- "$@"
    else
        du $arg .[^.]* *
    fi
}

# Use Git’s colored diff when available
hash git &>/dev/null
if [ $? -eq 0 ]; then
    function diff() {
        git diff --no-index --color-words "$@"
    }
fi

# Create a data URL from a file
function dataurl() {
    local mimeType=$(file -b --mime-type "$1")
    if [[ $mimeType == text/* ]]; then
        mimeType="${mimeType};charset=utf-8"
    fi
    echo "data:${mimeType};base64,$(openssl base64 -in "$1" | tr -d '\n')"
}

# Create a git.io short URL
function gitio() {
    if [ -z "${1}" -o -z "${2}" ]; then
        echo "Usage: \`gitio slug url\`"
        return 1
    fi
    curl -i http://git.io/ -F "url=${2}" -F "code=${1}"
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
    local port="${1:-8000}"
    sleep 1 && open "http://localhost:${port}/" &
    # Set the default Content-Type to `text/plain` instead of `application/octet-stream`
    # And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
    python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port"
}

# Start a PHP server from a directory, optionally specifying the port
# (Requires PHP 5.4.0+.)
function phpserver() {
    local port="${1:-4000}"
    local ip=$(ipconfig getifaddr en1)
    sleep 1 && open "http://${ip}:${port}/" &
    php -S "${ip}:${port}"
}

# Compare original and gzipped file size
function gz() {
    local origsize=$(wc -c < "$1")
    local gzipsize=$(gzip -c "$1" | wc -c)
    local ratio=$(echo "$gzipsize * 100/ $origsize" | bc -l)
    printf "orig: %d bytes\n" "$origsize"
    printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio"
}

# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
    if [ -t 0 ]; then # argument
        python -mjson.tool <<< "$*" | pygmentize -l javascript
    else # pipe
        python -mjson.tool | pygmentize -l javascript
    fi
}

# All the dig info
function digga() {
    dig +nocmd "$1" any +multiline +noall +answer
}

# Escape UTF-8 characters into their 3-byte format
function escape() {
    printf "\\\x%s" $(printf "$@" | xxd -p -c1 -u)
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# Decode \x{ABCD}-style Unicode escape sequences
function unidecode() {
    perl -e "binmode(STDOUT, ':utf8'); print \"$@\""
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# Get a character’s Unicode code point
function codepoint() {
    perl -e "use utf8; print sprintf('U+%04X', ord(\"$@\"))"
    # print a newline unless we’re piping the output to another program
    if [ -t 1 ]; then
        echo # newline
    fi
}

# Show all the names (CNs and SANs) listed in the SSL certificate
# for a given domain
function getcertnames() {
    if [ -z "${1}" ]; then
        echo "ERROR: No domain specified."
        return 1
    fi

    local domain="${1}"
    echo "Testing ${domain}…"
    echo # newline

    local tmp=$(echo -e "GET / HTTP/1.0\nEOT" \
        | openssl s_client -connect "${domain}:443" 2>&1);

    if [[ "${tmp}" = *"-----BEGIN CERTIFICATE-----"* ]]; then
        local certText=$(echo "${tmp}" \
            | openssl x509 -text -certopt "no_header, no_serial, no_version, \
            no_signame, no_validity, no_issuer, no_pubkey, no_sigdump, no_aux");
            echo "Common Name:"
            echo # newline
            echo "${certText}" | grep "Subject:" | sed -e "s/^.*CN=//";
            echo # newline
            echo "Subject Alternative Name(s):"
            echo # newline
            echo "${certText}" | grep -A 1 "Subject Alternative Name:" \
                | sed -e "2s/DNS://g" -e "s/ //g" | tr "," "\n" | tail -n +2
            return 0
    else
        echo "ERROR: Certificate not found.";
        return 1
    fi
}

# Install Grunt plugins and add them as `devDependencies` to `package.json`
# Usage: `gi contrib-watch contrib-uglify zopfli`
function gi() {
    local IFS=,
    eval npm install --save-dev grunt-{"$*"}
}

# Display image with tput
# https://gist.github.com/heptal/6052573
function image() {
    convert $1 -resize 40 txt:-|sed -E 's/://;s/\( ? ?//;s/, ? ?/,/g;s/\)//;s/([0-9]+,[0-9]+,[0-9]+),[0-9]+/\1/g;s/255/254/g;/mage/d'|awk '{print $1,$2}'|sed -E 's/^0,[0-9]+ /print "echo;tput setaf "\;/;s/^[0-9]+,[0-9]+ /print "tput setaf ";/;s/(.+),(.+),(.+)/\1\/42.5*36+\2\/42.5*6+\3\/42.5+16/'|bc|sed 's/$/;echo -n "  ";/'|tr '\n' ' '|sed 's/^/tput rev;/;s/; /;/g;s/$/tput sgr0;echo/'|bash
}

# Show and hide hidden files in finder
# http://osxdaily.com/2009/02/25/show-hidden-files-in-os-x/
function showhidden() {
    defaults write com.apple.finder AppleShowAllFiles TRUE
}
function hidehidden() {
    defaults write com.apple.finder AppleShowAllFiles FALSE
}

# Add a .gitkeep file to empty directories
function touch_empty() {
    find . -type d -empty -print0 | xargs -0 -I{} touch {}/.gitkeep
}

# Find and replace for all files in the current directory
function fandr() {
    if [ -z "${1}" -o -z "${2}" ]; then
        echo "Missing search and replace terms"
        return 1
    fi

    echo "Find '${1}' and replace with '${2}' for all files in $(pwd) [y/N]: "
    read go

    # Only go if the user hits y, Y, Yes, yes, or YES
    if [[ ("$go" == "y") || ("$go" == "Y") || ("$go" == "Yes") || ("$go" == "yes") || ("$go" == "YES") ]]; then
        # set the LC_ALL for the purpose of this sed command
        orig_lc_all=$LC_ALL
        LC_ALL=C

        # execute the command to find and replace
        find . -type f -exec sed -i '.fandr.bak' s/"${1}"/"${2}"/g {} \;

        # now remove the backup files
        find . -type f -name '*.fandr.bak' -exec rm -f {} \;

        # reset the LC_ALL value
        LC_ALL=$orig_lc_all
        return 0
    else
        echo "Not replacing, thanks anyways."
        return 1
    fi
}

function giphy() {

    if [ -z "${1}" ]; then
        echo "Missing Giphy url"
        return 1
    fi

    curl ${1} --output ~/Desktop/giphy_"$(date +%F_%H-%M-%S)".gif
    return 0
}

if [[ $(uname -s) == "Darwin" ]]; then
    source ~/.profile.osx.d/functions
elif [[ $(uname -s) == "Linux" ]]; then
    source ~/.profile.linux.d/functions
fi

# Get the Kubernetes context
kubernetes_context() {
   if [[ -n "$KUBECONFIG" ]]; then
       CONTEXT="$(kubectl config current-context)"
       if [[ -n "$CONTEXT" ]]; then
           echo "[${CONTEXT}]"
       fi
   fi
}

# usage: deploy <target_env?>
# examples:
# `deploy egaba` - deploys current branch to egaba env
# `deploy` - deploys current branch to default target env (if defined)
deploy() {
  if [[ ! ${PWD##*/} =~ web-main$ ]]; then
    echo "[deploy] Error: You must run this within the web-main repo."
    return
  fi

  local NORMALIZED_BRANCH_NAME=$(git branch --show-current | sed 's/\//_/g' | tr '[:upper:]' '[:lower:]')
  local TARGET_ENVIRONMENT="jgieselmann" # ADD YOUR ENV NAME HERE

  if [[ $TARGET_ENVIRONMENT == "" ]]; then
    echo "[deploy] Warning: Default TARGET_ENVIRONMENT missing."
  fi

  if [ -n "$1" ]; then
    TARGET_ENVIRONMENT="$1"
  fi

  if [[ $TARGET_ENVIRONMENT == "" ]]; then
    echo "[deploy] Error: Unknown deployment target. Usage: deploy <environment>"
    return
  fi

  echo "[deploy] Deploying branch '$NORMALIZED_BRANCH_NAME' to '$TARGET_ENVIRONMENT'"

  if [[ $NORMALIZED_BRANCH_NAME == "main" ]]; then
    echo "[deploy] Running command: flux create image policy $TARGET_ENVIRONMENT-web-main --image-ref=web-main --select-semver=\">=3.0.0\" --filter-regex=\"v(?P<semver>\d+\.\d+\.\d+)_main$\" --filter-extract='\$semver'"
    flux create image policy $TARGET_ENVIRONMENT-web-main \
      --image-ref=web-main --select-semver=">=3.0.0" --filter-regex="v(?P<semver>\d+\.\d+\.\d+)_main$" --filter-extract='$semver'
  else
    echo "[deploy] Running command: flux create image policy $TARGET_ENVIRONMENT-web-main --image-ref=web-main --select-alpha=asc --filter-regex=\"^${NORMALIZED_BRANCH_NAME}_\w+_(?P<timestamp>\d+)$\" --filter-extract='\$timestamp'"
    flux create image policy $TARGET_ENVIRONMENT-web-main \
      --image-ref=web-main --select-alpha=asc --filter-regex="^${NORMALIZED_BRANCH_NAME}_\w+_(?P<timestamp>\d+)$" --filter-extract='$timestamp'
  fi

  echo "[deploy] Running command: flux get image policy $TARGET_ENVIRONMENT-web-main"
  flux get image policy $TARGET_ENVIRONMENT-web-main
}

# usage: suspend_automation <target_env?>
# pauses automation on an environment so that new gcr images aren't picked up by Flux automatically
suspend_automation() {
  local TARGET_ENVIRONMENT="jgieselmann" # ADD YOUR ENV NAME HERE

  if [ -n "$1" ]; then
    TARGET_ENVIRONMENT="$1"
  fi

  echo "[suspend_automation] Running command: flux suspend image repository $TARGET_ENVIRONMENT-web-main"
  flux suspend image repository $TARGET_ENVIRONMENT-web-main
}

# usage: resume_automation <target_env?>
# resumes automation on an environment
resume_automation() {
  local TARGET_ENVIRONMENT="jgieselmann" # ADD YOUR ENV NAME HERE

  if [ -n "$1" ]; then
    TARGET_ENVIRONMENT="$1"
  fi

  echo "[resume_automation] Running command: flux resume image repository $TARGET_ENVIRONMENT-web-main"
  flux resume image repository $TARGET_ENVIRONMENT-web-main
}
