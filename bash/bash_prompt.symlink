# Sexy Bash Prompt, inspired by "Extravagant Zsh Prompt"
# Screenshot: http://cloud.gf3.ca/M5rG
# A big thanks to \amethyst on Freenode

#if [[ $COLORTERM = gnome-* && $TERM = xterm ]]  && infocmp gnome-256color >/dev/null 2>&1; then export TERM=gnome-256color
#elif [[ $TERM != dumb ]] && infocmp xterm-256color >/dev/null 2>&1; then export TERM=xterm-256color
#fi
#
#if tput setaf 1 &> /dev/null; then
#    tput sgr0
#    if [[ $(tput colors) -ge 256 ]] 2>/dev/null; then
#        MAGENTA=$(tput setaf 9)
#        ORANGE=$(tput setaf 172)
#        GREEN=$(tput setaf 190)
#        PURPLE=$(tput setaf 141)
#        WHITE=$(tput setaf 0)
#    else
#        MAGENTA=$(tput setaf 5)
#        ORANGE=$(tput setaf 4)
#        GREEN=$(tput setaf 2)
#        PURPLE=$(tput setaf 1)
#        WHITE=$(tput setaf 7)
#    fi
#    BOLD=$(tput bold)
#    RESET=$(tput sgr0)
#else
#    MAGENTA="\033[1;31m"
#    ORANGE="\033[1;33m"
#    GREEN="\033[1;32m"
#    PURPLE="\033[1;35m"
#    WHITE="\033[1;37m"
#    BOLD=""
#    RESET="\033[m"
#fi
#
#parse_git_dirty () {
#    [[ $(git status 2> /dev/null | tail -n1 | cut -c 1-17) != "nothing to commit" ]] && echo "*"
#}
#parse_git_branch () {
#    git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/\1$(parse_git_dirty)/"
#}
#
#PS1="\[${BOLD}${MAGENTA}\]\u \[$WHITE\]at \[$ORANGE\]\h \[$WHITE\]in \[$GREEN\]\w\[$WHITE\]\$([[ -n \$(git branch 2> /dev/null) ]] && echo \" on \")\[$PURPLE\]\$(parse_git_branch)\[$WHITE\]\n\$ \[$RESET\]"



# get current branch in git repo
function parse_git_branch() {
	BRANCH=`git branch 2> /dev/null | sed -e '/^[^*]/d' -e 's/* \(.*\)/\1/'`
	if [ ! "${BRANCH}" == "" ]
	then
		STAT=`parse_git_dirty`
		echo "[${BRANCH}${STAT}]"
	else
		echo ""
	fi
}

# get current status of git repo
function parse_git_dirty {
	status=`git status 2>&1 | tee`
	dirty=`echo -n "${status}" 2> /dev/null | grep "modified:" &> /dev/null; echo "$?"`
	untracked=`echo -n "${status}" 2> /dev/null | grep "Untracked files" &> /dev/null; echo "$?"`
	ahead=`echo -n "${status}" 2> /dev/null | grep "Your branch is ahead of" &> /dev/null; echo "$?"`
	newfile=`echo -n "${status}" 2> /dev/null | grep "new file:" &> /dev/null; echo "$?"`
	renamed=`echo -n "${status}" 2> /dev/null | grep "renamed:" &> /dev/null; echo "$?"`
	deleted=`echo -n "${status}" 2> /dev/null | grep "deleted:" &> /dev/null; echo "$?"`
	bits=''
	if [ "${renamed}" == "0" ]; then
		bits=">${bits}"
	fi
	if [ "${ahead}" == "0" ]; then
		bits="*${bits}"
	fi
	if [ "${newfile}" == "0" ]; then
		bits="+${bits}"
	fi
	if [ "${untracked}" == "0" ]; then
		bits="?${bits}"
	fi
	if [ "${deleted}" == "0" ]; then
		bits="x${bits}"
	fi
	if [ "${dirty}" == "0" ]; then
		bits="!${bits}"
	fi
	if [ ! "${bits}" == "" ]; then
		echo " ${bits}"
	else
		echo ""
	fi
}

export PS1="\[\e[32m\]\h\[\e[m\]@\[\e[36m\]\u\[\e[m\]:\[\e[35m\]\W\[\e[m\]\[\e[33m\]\`parse_git_branch\`\[\e[m\] \[\e[31m\]\\$\[\e[m\] "
